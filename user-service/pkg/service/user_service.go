package service

import (
    "encoding/json"
    "fmt"
    "log"
    "user-service/pkg/mail"
    "user-service/pkg/model"
    "user-service/pkg/natswrap"
    "user-service/pkg/otp"
    "user-service/pkg/repository"

    "github.com/google/uuid"
    "golang.org/x/crypto/bcrypt"
)

type UserService struct {
    Repo *repository.UserRepository
    otps map[string]string
    nats natswrap.Publisher
}

func NewUserService(repo *repository.UserRepository, nats natswrap.Publisher) *UserService {
    return &UserService{
        Repo: repo,
        otps: make(map[string]string),
        nats: nats,
    }
}

func (us *UserService) Register(username, password, email string) (string, error) {
    log.Printf("‚û°Ô∏è Register called with: username=%s, email=%s", username, email)

    if us.Repo.UserExists(username) {
        log.Printf("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s", username)
        return "", fmt.Errorf("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    }

    hashedPassword, err := bcrypt.GenerateFromPassword([]byte(password), bcrypt.DefaultCost)
    if err != nil {
        log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞—Ä–æ–ª—è: %v", err)
        return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞—Ä–æ–ª—è: %v", err)
    }

    userID := uuid.New().String()
    user := &model.User{
        ID:       userID,
        Username: username,
        Password: string(hashedPassword),
        Email:    email,
    }

    log.Printf("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %+v", user)

    if err := us.Repo.CreateUser(user); err != nil {
        log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: %v", err)
        return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
    }

    log.Printf("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: %s (%s)", userID, email)

    otpToken := otp.GenerateUniqueOTP()
    if err := mail.SendOTPEmail(email, otpToken); err != nil {
        log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ OTP: %v", err)
        return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ OTP: %v", err)
    }

    log.Printf("üì® OTP –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–æ—á—Ç—É: %s (OTP: %s)", email, otpToken)
    us.otps[userID] = otpToken

    event := struct {
        UserId string `json:"user_id"`
    }{UserId: userID}
    data, _ := json.Marshal(event)
    us.nats.Publish("user.registered", data)

    log.Printf("üì£ Event 'user.registered' –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –¥–ª—è ID: %s", userID)

    return userID, nil
}

func (us *UserService) VerifyOTP(userID, otpCode string) bool {
    log.Printf("‚û°Ô∏è VerifyOTP called: userID=%s, otpCode=%s", userID, otpCode)

    storedOtp, exists := us.otps[userID]
    if !exists || storedOtp != otpCode {
        log.Printf("‚ùå OTP –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", userID)
        return false
    }

    delete(us.otps, userID)
    log.Printf("‚úÖ OTP –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", userID)

    us.nats.Publish("otp.verified", []byte(fmt.Sprintf("OTP verified for UserID: %s", userID)))

    return true
}

func (us *UserService) Login(email, password string) (*model.User, error) {
    log.Printf("‚û°Ô∏è Login attempt: email=%s", email)

    user, err := us.Repo.GetUserByEmail(email)
    if err != nil {
        log.Printf("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: %s", email)
        return nil, fmt.Errorf("user not found")
    }

    if err := bcrypt.CompareHashAndPassword([]byte(user.Password), []byte(password)); err != nil {
        log.Printf("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s", email)
        return nil, fmt.Errorf("invalid credentials")
    }

    log.Printf("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω: %s (%s)", user.ID, email)
    us.nats.Publish("user.logged_in", []byte(fmt.Sprintf("User logged in: %s, Email: %s", user.Username, user.Email)))

    return user, nil
}

func (us *UserService) ForgotPassword(email string) error {
    log.Printf("‚û°Ô∏è ForgotPassword called for: %s", email)

    user, err := us.Repo.GetUserByEmail(email)
    if err != nil {
        log.Printf("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è: %s", email)
        return fmt.Errorf("user not found")
    }

    otpCode := otp.GenerateUniqueOTP()
    us.otps[user.ID] = otpCode

    if err := mail.SendOTPEmail(email, otpCode); err != nil {
        log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ OTP: %v", err)
        return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ OTP: %v", err)
    }

    log.Printf("üì® OTP –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: %s (OTP: %s)", email, otpCode)
    us.nats.Publish("password.reset.requested", []byte(fmt.Sprintf("Reset requested for Email: %s", email)))

    return nil
}

func (us *UserService) ResetPassword(email, otpCode, newPassword string) error {
    log.Printf("‚û°Ô∏è ResetPassword called: email=%s, otp=%s", email, otpCode)

    user, err := us.Repo.GetUserByEmail(email)
    if err != nil {
        log.Printf("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: %s", email)
        return fmt.Errorf("user not found")
    }

    storedOtp, ok := us.otps[user.ID]
    if !ok || storedOtp != otpCode {
        log.Printf("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π OTP –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s", user.ID)
        return fmt.Errorf("invalid OTP")
    }

    delete(us.otps, user.ID)

    hashedPassword, err := bcrypt.GenerateFromPassword([]byte(newPassword), bcrypt.DefaultCost)
    if err != nil {
        log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è: %v", err)
        return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è: %v", err)
    }

    log.Printf("üîë –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è: %s", user.ID)
    us.nats.Publish("password.reset", []byte(fmt.Sprintf("Password reset for UserID: %s", user.ID)))

    return us.Repo.UpdatePassword(user.ID, string(hashedPassword))
}

func (us *UserService) GetUser(userID string) (*model.User, error) {
    log.Printf("‚û°Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID: %s", userID)
    return us.Repo.GetUserByID(userID)
}

func (us *UserService) UpdateUser(userID, username, email string) error {
    log.Printf("‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ID=%s, username=%s, email=%s", userID, username, email)
    return us.Repo.UpdateUser(userID, username, email)
}

func (us *UserService) DeleteUser(userID string) error {
    log.Printf("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s", userID)
    return us.Repo.DeleteUser(userID)
}

func (us *UserService) ListUsers() ([]model.User, error) {
    log.Printf("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    return us.Repo.GetAllUsers()
}
